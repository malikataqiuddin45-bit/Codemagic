workflows:
  expo_debug_gradle_8_7:
    name: "Expo Debug Build (Gradle 8.7 / Kotlin 1.9.24)"
    max_build_duration: 60
    instance_type: mac_mini_m2
    environment:
      vars:
        GRADLE_VERSION: "8.7"
        AGP_VERSION: "8.7.0"
        KOTLIN_VERSION: "1.9.24"
        JAVA_VERSION: "17"
      android:
        build_mode: debug
        gradle_wrapper_path: "android/gradlew"

    scripts:
      - name: üîß Setup JDK & Env
        script: |
          echo "== Setup JDK ${JAVA_VERSION} =="
          export JAVA_HOME=$(/usr/libexec/java_home -v ${JAVA_VERSION})
          java -version

      - name: ü©π Autopatch Gradle Wrapper
        script: |
          echo "== Ensure Gradle Wrapper ${GRADLE_VERSION} =="
          mkdir -p android/gradle/wrapper
          cat > android/gradle/wrapper/gradle-wrapper.properties <<EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          networkTimeout=10000
          EOF
          chmod +x android/gradlew || true

      - name: üß© Force Kotlin Version (for Expo autolinking)
        script: |
          echo "== Forcing Kotlin ${KOTLIN_VERSION} for all modules =="
          # Tambah block force Kotlin jika belum ada
          if [ -f android/build.gradle ] && ! grep -q "resolutionStrategy.eachDependency" android/build.gradle; then
            cat >> android/build.gradle <<EOF

          // üß© Auto-added by Codemagic YAML
          subprojects {
            configurations.configureEach {
              resolutionStrategy.eachDependency { details ->
                if (details.requested.group == "org.jetbrains.kotlin") {
                  details.useVersion("${KOTLIN_VERSION}")
                  details.because("Force all modules to use Kotlin ${KOTLIN_VERSION} to avoid Expo autolinking mismatch")
                }
              }
            }
          }
          EOF
          fi

      - name: üèóÔ∏è Build Debug APK (verbose)
        script: |
          cd android
          ./gradlew --version
          ./gradlew clean assembleDebug --no-daemon --stacktrace --info --warning-mode all
          cd ..

      - name: üì¶ Collect APK
        script: |
          mkdir -p build_artifacts
          find android/app/build/outputs/apk/debug -name "*.apk" -exec cp {} build_artifacts/ \;
          echo "‚úÖ APK copied to build_artifacts/"

    artifacts:
      - build_artifacts/*.apk

    publishing:
      email:
        recipients:
          - "youremail@example.com"
        notify:
          success: true
          failure: true
